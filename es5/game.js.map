{"version":3,"sources":["game.js"],"names":["jsonfile","path","fs","Game","buzzer","gameUI","masterUI","questionsDirectory","startOrContinue","devices","game","master","started","oldScreen","mode","teams","questions","currentQuestionIndex","answerWaitingForValidation","answers","buzzOnPressUnregister","recoverFromSave","console","log","addEventListener","max","controllersCount","i","lightOff","checkReady","setGame","leave","connect","sendDevices","isStarted","start","continue","initTeams","sendTeams","onPress","controllerIndex","buttonIndex","activateTeam","length","setMode","startQuestions","file","join","data","all","promise","Promise","resolve","reject","writeFile","save","readFileSync","fromArray","unlink","setScreenMode","loadQuestions","sendPlayMode","letters","split","Array","map","_","index","name","id","toLowerCase","lightOn","active","flash","points","answered","teamIndex","newName","team","sendTeam","sendUpdateTeam","questionsCount","send","buzzed","question","get","ql","load","loadInformations","answer","sendAnswered","removeSave","resetTeams","resetBuzzers","sendPlayQuestion"],"mappings":"AAAA;;;;;;;;;AAEA;;AACA;;AACA;;IAAYA,Q;;AACZ;;IAAYC,I;;AACZ;;IAAYC,E;;;;;;AAEZ;AACA;AACA;AACA;;IAEaC,I,WAAAA,I;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAYC,MAAZ,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsCC,kBAAtC,EAA0DC,eAA1D,EAA2E;AAAA;;AAAA;;AAC1E,OAAKJ,MAAL,GAAcA,MAAd;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA,OAAKC,kBAAL,GAA0BA,kBAA1B;AACA,OAAKE,OAAL,GAAe,EAAEL,QAAQ,KAAV,EAAiBM,MAAM,KAAvB,EAA8BC,QAAQ,KAAtC,EAAf;AACA,OAAKC,OAAL,GAAe,KAAf;AACA;AACA,OAAKC,SAAL,GAAiB,IAAjB;AACA,OAAKC,IAAL,GAAY,IAAZ;AACA,OAAKC,KAAL,GAAa,EAAb;AACA,OAAKC,SAAL,GAAiB,IAAjB;AACA,OAAKC,oBAAL,GAA4B,CAAC,CAA7B;AACA,OAAKC,0BAAL,GAAkC,IAAlC;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKX,eAAL,GAAuBA,eAAvB;AACA,OAAKY,qBAAL,GAA6B,IAA7B;;AAEA,MAAIZ,mBAAmB,UAAvB,EAAmC;AAClC,QAAKa,eAAL;AACAC,WAAQC,GAAR,CAAY,cAAZ;AACA;AACA;;AAED,OAAKnB,MAAL,CAAYoB,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;;AAE3C,OAAIC,MAAM,MAAKrB,MAAL,CAAYsB,gBAAZ,EAAV;AACA,QAAI,IAAIC,IAAE,CAAV,EAAaA,IAAIF,GAAjB,EAAsBE,GAAtB,EAA2B;AAC1B,UAAKvB,MAAL,CAAYwB,QAAZ,CAAqBD,CAArB;AACA;;AAED,SAAKlB,OAAL,CAAaL,MAAb,GAAsB,IAAtB;AACA,SAAKyB,UAAL;AACA,GATD;;AAWA,OAAKxB,MAAL,CAAYmB,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AAC3C,SAAKf,OAAL,CAAaC,IAAb,GAAoB,IAApB;AACA,SAAKL,MAAL,CAAYyB,OAAZ;AACA,SAAKD,UAAL;AACA,GAJD;;AAMA,OAAKvB,QAAL,CAAckB,gBAAd,CAA+B,OAA/B,EAAwC,YAAM;AAC7C,SAAKf,OAAL,CAAaE,MAAb,GAAsB,IAAtB;AACA,SAAKL,QAAL,CAAcwB,OAAd;AACA,SAAKD,UAAL;AACA,GAJD;;AAMA,OAAKzB,MAAL,CAAYoB,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AAC3C,SAAKf,OAAL,CAAaL,MAAb,GAAsB,KAAtB;AACA,SAAK2B,KAAL;AACA,GAHD;;AAKA,OAAK1B,MAAL,CAAYmB,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AAC3C,SAAKf,OAAL,CAAaC,IAAb,GAAoB,KAApB;AACA,SAAKqB,KAAL;AACA,GAHD;;AAKA,OAAKzB,QAAL,CAAckB,gBAAd,CAA+B,OAA/B,EAAwC,YAAM;AAC7C,SAAKf,OAAL,CAAaE,MAAb,GAAsB,KAAtB;AACA,SAAKoB,KAAL;AACA,GAHD;;AAKA,OAAK3B,MAAL,CAAY4B,OAAZ;AACA;;;;+BAEY;AACZ,OAAI,KAAKvB,OAAL,CAAaC,IAAjB,EAAuB;AACtB,SAAKL,MAAL,CAAY4B,WAAZ,CAAwB,KAAKxB,OAA7B;AACA;AACD,OAAI,KAAKA,OAAL,CAAaE,MAAjB,EAAyB;AACxB,SAAKL,QAAL,CAAc2B,WAAd,CAA0B,KAAKxB,OAA/B;AACA;;AAED,OAAI,CAAC,KAAKA,OAAL,CAAaL,MAAd,IAAwB,CAAC,KAAKK,OAAL,CAAaC,IAAtC,IAA8C,CAAC,KAAKD,OAAL,CAAaE,MAAhE,EAAwE;AACvE;AACA;;AAED,OAAI,CAAC,KAAKuB,SAAL,EAAL,EAAuB;AACtB,SAAKC,KAAL;AACA;AACA;;AAED;AACA,QAAKC,QAAL;AACA;;;0BAEO;AACP;AACA;;AAEA,OAAI,KAAK3B,OAAL,CAAaC,IAAjB,EAAuB;AACtB,SAAKL,MAAL,CAAY4B,WAAZ,CAAwB,KAAKxB,OAA7B;AACA;AACA;AACD,OAAI,KAAKA,OAAL,CAAaE,MAAjB,EAAyB;AACxB,SAAKL,QAAL,CAAc2B,WAAd,CAA0B,KAAKxB,OAA/B;AACA;AACA;AACD;;;8BAEW;AACX,UAAO,KAAKG,OAAZ;AACA;;;0BAEO;AAAA;;AACP,QAAKA,OAAL,GAAe,IAAf;AACAU,WAAQC,GAAR,CAAY,WAAZ;AACA,QAAKc,SAAL;AACA,QAAKC,SAAL,CAAe,KAAKvB,KAApB;AACA,OAAI,KAAKK,qBAAT,EAAgC;AAC/B,SAAKA,qBAAL;AACA;AACD,QAAKA,qBAAL,GAA6B,KAAKhB,MAAL,CAAYmC,OAAZ,CAAoB,UAACC,eAAD,EAAkBC,WAAlB,EAAkC;AAClFnB,YAAQC,GAAR,CAAY,oBAAZ,EAAkCiB,eAAlC;AACA,WAAKE,YAAL,CAAkBF,eAAlB;AACA,IAH4B,CAA7B;AAIA;AACA;;;8BAEU;AACV;;AAEA;AACAlB,WAAQC,GAAR,CAAY,uBAAZ,EAAqC,KAAKT,IAA1C,EAAgD,KAAKE,SAAL,CAAe2B,MAAf,EAAhD;AACA,OAAI,KAAK7B,IAAT,EAAe;AACd,SAAK8B,OAAL,CAAa,KAAK9B,IAAlB,EAAwB,KAAxB,EAA+B,KAA/B;AACA;;AAED,OAAI,KAAKC,KAAT,EAAgB;AACf,SAAKuB,SAAL,CAAe,KAAKvB,KAApB;AACA;;AAEDO,WAAQC,GAAR,CAAY,KAAKN,oBAAjB,EAAuC,KAAKD,SAAL,CAAe2B,MAAf,KAAwB,CAA/D;AACA,OAAI,KAAK3B,SAAL,IAAkB,KAAKC,oBAAL,GAA4B,KAAKD,SAAL,CAAe2B,MAAf,KAAwB,CAA1E,EAA6E;AAC5E;AACA;AACA,SAAKE,cAAL;AACA;;AAED;;;;AAIA;;;yBAIM;AACN,OAAIC,OAAO7C,KAAK8C,IAAL,CAAU,KAAKxC,kBAAf,EAAmC,WAAnC,CAAX;;AAEA,OAAIyC,OAAO;AACVlC,UAAM,KAAKA,IADD;AAEVC,WAAO,KAAKA,KAFF;AAGVH,aAAS,KAAKA,OAHJ;AAIV;AACAK,0BAAsB,KAAKA,oBALjB;AAMVC,gCAA4B,KAAKA,0BANvB;AAOVC,aAAS,KAAKA,OAPJ;AAQVH,eAAW,KAAKA,SAAL,IAAkB,KAAKA,SAAL,CAAeiC,GAAf;AARnB,IAAX;;AAWA,OAAIC,UAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9CrD,aAASsD,SAAT,CAAmBR,IAAnB,EAAyBE,IAAzB,EAA+B,YAAM;AACpCI;AACA,KAFD;AAGA,IAJa,CAAd;;AAMA,UAAOF,OAAP;AACA;;;oCAEiB;AACjB,OAAIJ,OAAO7C,KAAK8C,IAAL,CAAU,KAAKxC,kBAAf,EAAmC,WAAnC,CAAX;;AAEA,OAAIgD,OAAOvD,SAASwD,YAAT,CAAsBV,IAAtB,CAAX;AACAxB,WAAQC,GAAR,CAAY,mBAAZ,EAAiCgC,IAAjC;AACA,QAAKzC,IAAL,GAAYyC,KAAKzC,IAAjB;AACA,QAAKC,KAAL,GAAawC,KAAKxC,KAAlB;AACA,QAAKH,OAAL,GAAe2C,KAAK3C,OAApB;AACA;AACA;AACA,QAAKK,oBAAL,GAA4BsC,KAAKtC,oBAAjC;AACA,QAAKC,0BAAL,GAAkCqC,KAAKrC,0BAAvC;AACA,QAAKC,OAAL,GAAeoC,KAAKpC,OAApB;AACA,QAAKH,SAAL,GAAiB,kCAAiB,KAAKF,IAAtB,CAAjB;AACA,QAAKE,SAAL,CAAeyC,SAAf,CAAyBF,KAAKvC,SAA9B;AACA;;;+BAEY;AACZ,OAAI8B,OAAO7C,KAAK8C,IAAL,CAAU,KAAKxC,kBAAf,EAAmC,WAAnC,CAAX;AACAL,MAAGwD,MAAH,CAAUZ,IAAV;AACA;;AAED;;;;;;AAMA;;;;;;0BAGQhC,I,EAAgD;AAAA,OAA1C6C,aAA0C,uEAA1B,IAA0B;AAAA,OAApBC,aAAoB,uEAAN,IAAM;;AACvD,QAAK9C,IAAL,GAAYA,IAAZ;AACA,QAAKyC,IAAL;AACA,OAAGI,aAAH,EAAkB;AACjB,SAAKtD,MAAL,CAAYwD,YAAZ,CAAyB/C,IAAzB;AACA,SAAKR,QAAL,CAAcuD,YAAd,CAA2B/C,IAA3B;AACA;AACD,OAAI8C,aAAJ,EAAmB;AAClB,SAAKA,aAAL,CAAmB,KAAK9C,IAAxB;AACA;AACD;;AAED;;;;;;8BAGY;AACX,OAAIgD,UAAU,uBAAuBC,KAAvB,CAA6B,EAA7B,CAAd;AACA,QAAKhD,KAAL,GAAa,IAAIiD,KAAJ,CAAU,KAAK5D,MAAL,CAAYsB,gBAAZ,EAAV,EACXqB,IADW,GAEXgB,KAFW,CAEL,GAFK,EAGXE,GAHW,CAGP,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAClB,WAAO;AACNC,WAAMN,QAAQK,KAAR,CADA;AAENE,SAAIP,QAAQK,KAAR,EAAeG,WAAf,EAFE;AAGNC,cAAS,KAHH;AAINC,aAAQ,KAJF;AAKNC,YAAO,KALD;AAMNC,aAAQ,CANF;AAONC,eAAU;AAPJ,KAAP;AASA,IAbW,CAAb;AAcA;;AAED;;;;;;;;4BAMU5D,K,EAAO;AAChB,QAAKV,MAAL,CAAYiC,SAAZ,CAAsBvB,KAAtB;AACA,QAAKT,QAAL,CAAcgC,SAAd,CAAwBvB,KAAxB;AACA;;;iCAEc6D,S,EAAWC,O,EAAS;AAClC,OAAIC,OAAO,KAAK/D,KAAL,CAAW6D,SAAX,CAAX;AACAE,QAAKV,IAAL,GAAYS,OAAZ;AACAC,QAAKP,OAAL,GAAe,IAAf;AACAO,QAAKL,KAAL,GAAa,IAAb;AACAK,QAAKH,QAAL,GAAgB,KAAhB;AACA,QAAKI,QAAL,CAAcD,IAAd;AACA;;;2BAEQA,I,EAAM;AACd,QAAKzE,MAAL,CAAY2E,cAAZ,CAA2BF,IAA3B;AACA,QAAKxE,QAAL,CAAc0E,cAAd,CAA6BF,IAA7B;AACAA,QAAKL,KAAL,GAAa,KAAb;AACA;;AAED;;;;;;;;;;;;;;;+BAgBajC,e,EAAiB;AAC7BlB,WAAQC,GAAR,CAAY,wBAAZ,EAAsCiB,eAAtC,EAAuD,KAAKzB,KAAL,CAAW4B,MAAlE;AACA,OAAImC,OAAO,KAAK/D,KAAL,CAAWyB,eAAX,CAAX;;AAEA;AACA,OAAIsC,KAAKN,MAAT,EAAiB;AAChB;AACA;;AAED;AACA,QAAKpE,MAAL,CAAYmE,OAAZ,CAAoB/B,eAApB;;AAEA;AACAsC,QAAKN,MAAL,GAAc,IAAd;AACAM,QAAKP,OAAL,GAAe,IAAf;AACAO,QAAKL,KAAL,GAAa,IAAb;AACAK,QAAKH,QAAL,GAAgB,KAAhB;AACA,QAAKI,QAAL,CAAcD,IAAd;;AAEA,QAAKvB,IAAL;AACA;;AAED;;;;;;mCAGiB;AAAA;;AAChB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAIpB,QAAQ;AACXlB,0BAAsB,KAAKA,oBADhB;AAEXgE,oBAAgB,KAAKjE,SAAL,CAAe2B,MAAf;AAFL,IAAZ;AAIArB,WAAQC,GAAR,CAAY,QAAZ,EAAsBY,KAAtB;AACA,QAAK9B,MAAL,CAAY6E,IAAZ,CAAiB,OAAjB,EAA0B/C,KAA1B;AACA,QAAK7B,QAAL,CAAc4E,IAAd,CAAmB,OAAnB,EAA4B/C,KAA5B;;AAEA;AACA,QAAKpB,KAAL,CAAWkD,GAAX,CAAe,UAACa,IAAD,EAAOX,KAAP,EAAiB;AAC/BW,SAAKP,OAAL,GAAe,KAAf;AACA,WAAKnE,MAAL,CAAYwB,QAAZ,CAAqBuC,KAArB;AACA,WAAK9D,MAAL,CAAY2E,cAAZ,CAA2BF,IAA3B;AACA,WAAKxE,QAAL,CAAc0E,cAAd,CAA6BF,IAA7B;AACA,IALD;;AAOA;AACA,OAAI,KAAK1D,qBAAT,EAAgC;AAC/B,SAAKA,qBAAL;AACA;;AAGD,QAAKA,qBAAL,GAA6B,KAAKhB,MAAL,CAAYmC,OAAZ,CAAoB,UAACC,eAAD,EAAkBC,WAAlB,EAAkC;AAClF;AACA,WAAK0C,MAAL,CAAY3C,eAAZ;AACA,IAH4B,CAA7B;;AAKA,QAAKe,IAAL;AACA;;;+BAEYY,K,EAAO;AACnB,OAAIiB,WAAW;AACdA,cAAU,KAAKpE,SAAL,CAAeqE,GAAf,CAAmBlB,KAAnB,CADI;AAEdA,WAAOA;AAFO,IAAf;AAIA,QAAK9D,MAAL,CAAY6E,IAAZ,CAAiB,UAAjB,EAA6BE,QAA7B;AACA,QAAK9E,QAAL,CAAc4E,IAAd,CAAmB,UAAnB,EAA+BE,QAA/B;AACA;;;gCAEatE,I,EAAM;AAAA;;AACnB,OAAIwE,KAAK,qCAAT;;AAEA,QAAKtE,SAAL,GAAiB,IAAjB;AACAsE,MAAGC,IAAH,CAAQ,KAAKhF,kBAAb,EAAiCO,IAAjC,EAAuC,UAACE,SAAD,EAAe;AACrD,WAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAKA,SAAL,CAAeiD,GAAf,CAAmB,UAACmB,QAAD,EAAc;AAChCA,cAASI,gBAAT,CAA0B,YAAM,CAAE,CAAlC;AACA,KAFD;AAGA,IALD;AAMA;;;yBAEMhD,e,EAAiB;AACvBlB,WAAQC,GAAR,CAAY,wBAAsBiB,eAAlC;AACAlB,WAAQC,GAAR,CAAY,mCAAZ,EAAiD,KAAKN,oBAAtD;AACAK,WAAQC,GAAR,CAAY,yCAAZ,EAAuD,KAAKL,0BAA5D;AACA,OAAI,KAAKD,oBAAL,IAA6B,CAAC,CAA9B,IAAmC,KAAKC,0BAAL,IAAmC,IAA1E,EAAgF;AAC/E;AACA;;AAED,OAAIuE,SAAS,KAAKtE,OAAL,CAAa,KAAKF,oBAAlB,CAAb;AACAK,WAAQC,GAAR,CAAY,qBAAZ,EAAmCkE,MAAnC;AACA,OAAIA,OAAOjD,eAAP,KAA2B,CAAC,CAAhC,EAAmC;AAClC;AACA;;AAED;AACA,OAAIsC,OAAO,KAAK/D,KAAL,CAAWyB,eAAX,CAAX;AACA,QAAKpC,MAAL,CAAYmE,OAAZ,CAAoB/B,eAApB;AACAsC,QAAKP,OAAL,GAAe,IAAf;AACAO,QAAKL,KAAL,GAAa,IAAb;AACAK,QAAKH,QAAL,GAAgB,IAAhB;AACA,QAAKI,QAAL,CAAcD,IAAd;AACA,QAAK5D,0BAAL,GAAkCsB,eAAlC;;AAEA,QAAKnC,MAAL,CAAYqF,YAAZ,CAAyB,KAAKzE,oBAA9B,EAAoD,IAApD,EAA0DuB,eAA1D;AACA,QAAKlC,QAAL,CAAcoF,YAAd,CAA2B,KAAKzE,oBAAhC,EAAsD,IAAtD,EAA4DuB,eAA5D;AACA;;;+BAEY;AAAA;;AACZ,QAAKrB,OAAL,CAAa,KAAKF,oBAAlB,IAA0C,IAAI+C,KAAJ,CAAU,KAAK5D,MAAL,CAAYsB,gBAAZ,EAAV,EACxCqB,IADwC,GAExCgB,KAFwC,CAElC,GAFkC,EAGxCE,GAHwC,CAGpC,YAAM;AACV,WAAO,CAAC,CAAR;AACA,IALwC,CAA1C;;AAOA,QAAKlD,KAAL,CAAWkD,GAAX,CAAe,UAACa,IAAD,EAAU;AACxB,QAAIA,KAAKP,OAAL,IAAgBO,KAAKH,QAAzB,EAAmC;AAClCG,UAAKP,OAAL,GAAe,KAAf;AACAO,UAAKL,KAAL,GAAa,KAAb;AACAK,UAAKH,QAAL,GAAgB,KAAhB;AACA,YAAKI,QAAL,CAAcD,IAAd;AACA;AACD,IAPD;AAQA;;;iCAEc;AAAA;;AACd,QAAK/D,KAAL,CAAWkD,GAAX,CAAe,UAACa,IAAD,EAAOX,KAAP,EAAiB;AAC/B,WAAK/D,MAAL,CAAYwB,QAAZ,CAAqBuC,KAArB;AACA,IAFD;AAGA;;;gCAEanB,I,EAAM;AACnB,QAAK9B,0BAAL,GAAkC,IAAlC;AACA,QAAKD,oBAAL,GAA4B+B,KAAKmB,KAAjC;;AAEA,OAAI,KAAKlD,oBAAL,IAA6B,KAAKD,SAAL,CAAe2B,MAAf,EAAjC,EAA0D;AACzD;AACArB,YAAQC,GAAR,CAAY,SAAZ;AACA,SAAKX,OAAL,GAAe,KAAf;AACA,SAAK+E,UAAL;AACA,SAAKtF,MAAL,CAAY6E,IAAZ,CAAiB,KAAjB,EAAwB,IAAxB;AACA,SAAK5E,QAAL,CAAc4E,IAAd,CAAmB,KAAnB,EAA0B,IAA1B;AACA;AACA;;AAED,QAAKU,UAAL;AACA,QAAKC,YAAL;;AAEA;;;AAGA,QAAKxF,MAAL,CAAYyF,gBAAZ,CAA6B9C,KAAKmB,KAAlC,EAAyC,MAAzC;AACA,QAAK7D,QAAL,CAAcwF,gBAAd,CAA+B9C,KAAKmB,KAApC,EAA2C,MAA3C;;AAEA,QAAKZ,IAAL;AACA;;;qCAEkB;AAClBjC,WAAQC,GAAR,CAAY,uBAAZ;AACA,QAAKL,0BAAL,GAAkC,IAAlC;AACA;AACA,QAAK2E,YAAL;AACA,QAAKxF,MAAL,CAAYyF,gBAAZ,CAA6B,KAAK7E,oBAAlC,EAAwD,UAAxD;AACA,QAAKX,QAAL,CAAcwF,gBAAd,CAA+B,KAAK7E,oBAApC,EAA0D,UAA1D;;AAEA,QAAKsC,IAAL;AACA;;;4BAESmB,M,EAAQ;AACjB,OAAI,KAAKxD,0BAAL,IAAmC,IAAvC,EAA6C;AAC5C;AACA;;AAED,OAAIsB,kBAAkB,KAAKtB,0BAA3B;AACA,OAAI4D,OAAO,KAAK/D,KAAL,CAAWyB,eAAX,CAAX;;AAEAsC,QAAKJ,MAAL,IAAeA,MAAf;;AAEA,QAAKvD,OAAL,CAAa,KAAKF,oBAAlB,EAAwCuB,eAAxC,IAA2D,CAA3D;;AAEA,QAAKpC,MAAL,CAAYwB,QAAZ,CAAqBY,eAArB;AACAsC,QAAKP,OAAL,GAAeG,SAAS,CAAxB;AACAI,QAAKL,KAAL,GAAa,IAAb;AACA,QAAKM,QAAL,CAAcD,IAAd;;AAEA,QAAKvB,IAAL;AACA;;AAED;;;;;;+BAGa;AACZ;;AAEA,QAAKA,IAAL;AACA","file":"game.js","sourcesContent":["\"use strict\";\n\nimport { Question, BlindQuestion, DeafQuestion } from './question'\nimport { QuestionLoader, QuestionList } from './question_loader'\nimport * as jsonfile from 'jsonfile'\nimport * as path from 'path'\nimport * as fs from 'fs'\n\n//type Screen = \"starting\" | \"devices\" | \"mode-select\" | \"team-activation\" | \"questions\" | \"score\"\n//type Devices = { buzzer: boolean, game: boolean, master: boolean }\n//type Mode = \"random\" | \"normal\"\n//type PlayState = \"play\" | \"continue\" | \"stop\" | \"pause\"\n\nexport class Game {\n\t// buzzer: Buzzer\n\t// gameUI: GameUI\n\t// masterUI: GameUI\n\t// devices: Devices\n\t// started: boolean\n\t// screen: Screen\n\t// oldScreen: Screen\n\t// mode: Mode\n\t// teams: Array<Team>\n\t// questions: QuestionList\n\t// answers: Array<Array<number>>\n\t// currentQuestionIndex: number\n\t// answerWaitingForValidation: number\n\t// questionsDirectory: string\n\t// startOrContinue: string\n\n\tconstructor(buzzer, gameUI, masterUI, questionsDirectory, startOrContinue) {\n\t\tthis.buzzer = buzzer\n\t\tthis.gameUI = gameUI\n\t\tthis.masterUI = masterUI\n\t\tthis.questionsDirectory = questionsDirectory;\n\t\tthis.devices = { buzzer: false, game: false, master: false }\n\t\tthis.started = false\n\t\t//this.screen = 'starting'\n\t\tthis.oldScreen = null\n\t\tthis.mode = null\n\t\tthis.teams = []\n\t\tthis.questions = null\n\t\tthis.currentQuestionIndex = -1\n\t\tthis.answerWaitingForValidation = null\n\t\tthis.answers = []\n\t\tthis.startOrContinue = startOrContinue;\n\t\tthis.buzzOnPressUnregister = null;\n\n\t\tif (startOrContinue == 'continue') {\n\t\t\tthis.recoverFromSave();\n\t\t\tconsole.log('RESEST TEAMS')\n\t\t\t//this.resetTeams();\n\t\t}\n\n\t\tthis.buzzer.addEventListener('ready', () => {\n\t\t\t\n\t\t\tvar max = this.buzzer.controllersCount()\n\t\t\tfor(var i=0; i < max; i++) {\n\t\t\t\tthis.buzzer.lightOff(i)\n\t\t\t}\n\n\t\t\tthis.devices.buzzer = true\n\t\t\tthis.checkReady()\n\t\t})\n\n\t\tthis.gameUI.addEventListener('ready', () => {\n\t\t\tthis.devices.game = true\n\t\t\tthis.gameUI.setGame(this)\n\t\t\tthis.checkReady()\n\t\t})\n\n\t\tthis.masterUI.addEventListener('ready', () => {\n\t\t\tthis.devices.master = true\n\t\t\tthis.masterUI.setGame(this)\n\t\t\tthis.checkReady()\n\t\t})\n\n\t\tthis.buzzer.addEventListener('leave', () => {\n\t\t\tthis.devices.buzzer = false\n\t\t\tthis.leave()\n\t\t})\n\n\t\tthis.gameUI.addEventListener('leave', () => {\n\t\t\tthis.devices.game = false\n\t\t\tthis.leave()\n\t\t})\n\n\t\tthis.masterUI.addEventListener('leave', () => {\n\t\t\tthis.devices.master = false\n\t\t\tthis.leave()\n\t\t})\n\n\t\tthis.buzzer.connect();\n\t}\n\n\tcheckReady() {\n\t\tif (this.devices.game) {\n\t\t\tthis.gameUI.sendDevices(this.devices)\n\t\t}\n\t\tif (this.devices.master) {\n\t\t\tthis.masterUI.sendDevices(this.devices);\n\t\t}\n\t\t\n\t\tif (!this.devices.buzzer || !this.devices.game || !this.devices.master) {\n\t\t\treturn\n\t\t}\n\n\t\tif (!this.isStarted()) {\n\t\t\tthis.start()\n\t\t\treturn\n\t\t}\n\n\t\t// Continue Game\n\t\tthis.continue()\n\t}\n\n\tleave() {\n\t\t//this.oldScreen = this.screen;\n\t\t//this.screen = 'devices'\n\n\t\tif (this.devices.game) {\n\t\t\tthis.gameUI.sendDevices(this.devices)\n\t\t\t//this.gameUI.sendScreen(this.screen)\n\t\t}\n\t\tif (this.devices.master) {\n\t\t\tthis.masterUI.sendDevices(this.devices)\n\t\t\t//this.masterUI.sendScreen(this.screen)\n\t\t}\n\t}\n\n\tisStarted() {\n\t\treturn this.started\n\t}\n\n\tstart() {\n\t\tthis.started = true\n\t\tconsole.log('start....')\n\t\tthis.initTeams();\n\t\tthis.sendTeams(this.teams);\n\t\tif (this.buzzOnPressUnregister) {\n\t\t\tthis.buzzOnPressUnregister();\n\t\t}\n\t\tthis.buzzOnPressUnregister = this.buzzer.onPress((controllerIndex, buttonIndex) => {\n\t\t\tconsole.log('Server -- buzz1 : ', controllerIndex)\n\t\t\tthis.activateTeam(controllerIndex)\n\t\t})\n\t\t//this.setScreen('mode-select')\n\t}\n\n\tcontinue() {\n\t\t//this.setScreen(this.oldScreen)\n\n\t\t// Send the mode if already one\n\t\tconsole.log('SERVER -- CONTINUE : ', this.mode, this.questions.length());\n\t\tif (this.mode) {\n\t\t\tthis.setMode(this.mode, false, false)\n\t\t}\n\n\t\tif (this.teams) {\n\t\t\tthis.sendTeams(this.teams);\n\t\t}\n\n\t\tconsole.log(this.currentQuestionIndex, this.questions.length()-1)\n\t\tif (this.questions && this.currentQuestionIndex < this.questions.length()-1) {\n\t\t\t//this.gameUI.sendQuestions(this.questions.all(), this.currentQuestionIndex)\n\t\t\t//this.masterUI.sendQuestions(this.questions.all(), this.currentQuestionIndex)\n\t\t\tthis.startQuestions()\n\t\t}\n\n\t\t/*if (this.currentQuestionIndex && this.screen != 'score') {\n\t\t\tconsole.log('currentQuestionIndex  : ', this.currentQuestionIndex)\n\t\t\tthis.startQuestion(this.currentQuestionIndex);\n\t\t}*/\n\t}\n\n\n\n\tsave() {\n\t\tvar file = path.join(this.questionsDirectory, 'game.json')\n\n\t\tvar data = {\n\t\t\tmode: this.mode,\n\t\t\tteams: this.teams,\n\t\t\tstarted: this.started,\n\t\t\t//screen: this.screen,\n\t\t\tcurrentQuestionIndex: this.currentQuestionIndex,\n\t\t\tanswerWaitingForValidation: this.answerWaitingForValidation,\n\t\t\tanswers: this.answers,\n\t\t\tquestions: this.questions && this.questions.all()\n\t\t};\n\n\t\tvar promise = new Promise((resolve, reject) => {\n\t\t\tjsonfile.writeFile(file, data, () => {\n\t\t\t\tresolve()\n\t\t\t})\n\t\t});\n\n\t\treturn promise\n\t}\n\n\trecoverFromSave() {\n\t\tvar file = path.join(this.questionsDirectory, 'game.json')\n\n\t\tvar save = jsonfile.readFileSync(file)\n\t\tconsole.log('Server -- save : ', save)\n\t\tthis.mode = save.mode\n\t\tthis.teams = save.teams\n\t\tthis.started = save.started\n\t\t//this.screen = save.screen\n\t\t//this.oldScreen = save.screen\n\t\tthis.currentQuestionIndex = save.currentQuestionIndex\n\t\tthis.answerWaitingForValidation = save.answerWaitingForValidation\n\t\tthis.answers = save.answers\n\t\tthis.questions = new QuestionList(this.mode)\n\t\tthis.questions.fromArray(save.questions)\n\t}\n\n\tremoveSave() {\n\t\tvar file = path.join(this.questionsDirectory, 'game.json')\n\t\tfs.unlink(file);\n\t}\n\n\t/*setScreen(screen) {\n\t\tthis.screen = screen\n\t\tthis.gameUI.sendScreen(this.screen)\n\t\tthis.masterUI.sendScreen(this.screen)\n\t}*/\n\n\t/********************************************\n\t * MODE SCREEN\n\t ********************************************/\n\tsetMode(mode, setScreenMode = true, loadQuestions=true) {\n\t\tthis.mode = mode\n\t\tthis.save()\n\t\tif(setScreenMode) {\n\t\t\tthis.gameUI.sendPlayMode(mode)\n\t\t\tthis.masterUI.sendPlayMode(mode)\n\t\t}\n\t\tif (loadQuestions) {\n\t\t\tthis.loadQuestions(this.mode);\n\t\t}\n\t}\n\n\t/********************************************\n\t * TEAM ACTIVATION SCREEN\n\t ********************************************/\n\tinitTeams() {\n\t\tvar letters = 'ABCDEFGHIJKLMNOPQRST'.split('');\n\t\tthis.teams = new Array(this.buzzer.controllersCount())\n\t\t\t.join()\n\t\t\t.split(',')\n\t\t\t.map((_, index) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: letters[index],\n\t\t\t\t\tid: letters[index].toLowerCase(),\n\t\t\t\t\tlightOn: false,\n\t\t\t\t\tactive: false,\n\t\t\t\t\tflash: false,\n\t\t\t\t\tpoints: 0,\n\t\t\t\t\tanswered: false\n\t\t\t\t}\n\t\t\t})\n\t}\n\n\t/*cleanTeams() {\n\t\tthis.teams = this.teams.filter((team) => {\n\t\t\treturn this.\n\t\t})\n\t}*/\n\n\tsendTeams(teams) {\n\t\tthis.gameUI.sendTeams(teams)\n\t\tthis.masterUI.sendTeams(teams)\n\t}\n\n\tupdateTeamName(teamIndex, newName) {\n\t\tvar team = this.teams[teamIndex]\n\t\tteam.name = newName\n\t\tteam.lightOn = true\n\t\tteam.flash = true\n\t\tteam.answered = false;\n\t\tthis.sendTeam(team)\n\t}\n\n\tsendTeam(team) {\n\t\tthis.gameUI.sendUpdateTeam(team)\n\t\tthis.masterUI.sendUpdateTeam(team)\n\t\tteam.flash = false\n\t}\n\n\t/*setTeamsActivation() {\n\t\t// Initialize the teams\n\t\t//this.initTeams();\n\t\t//this.sendTeams(this.teams)\n\n\t\t//this.loadQuestions(this.mode)\n\n\t\tthis.setScreen('team-activation')\n\t\tthis.buzzer.onPress((controllerIndex, buttonIndex) => {\n\t\t\tconsole.log('Server -- buzz2 : ', controllerIndex)\n\t\t\tthis.activateTeam(controllerIndex)\n\t\t})\n\n\t\tthis.save()\n\t}*/\n\n\tactivateTeam(controllerIndex) {\n\t\tconsole.log('Server -- activateTeam', controllerIndex, this.teams.length)\n\t\tvar team = this.teams[controllerIndex]\n\n\t\t// Make sure a team can only be activated once\n\t\tif (team.active) {\n\t\t\treturn\n\t\t}\n\n\t\t// Light on the new activated team\n\t\tthis.buzzer.lightOn(controllerIndex)\n\n\t\t// Update the team\n\t\tteam.active = true\n\t\tteam.lightOn = true;\n\t\tteam.flash = true;\n\t\tteam.answered = false;\n\t\tthis.sendTeam(team);\n\n\t\tthis.save()\n\t}\n\n\t/********************************************\n\t * QUESTIONS SCREEN\n\t ********************************************/\n\tstartQuestions() {\n\t\t//this.setScreen('questions')\n\n\t\t//this.cleanTeams(this.teams)\n\t\t//this.gameUI.sendTeams(this.teams)\n\t\t//this.masterUI.sendTeams(this.teams)\n\n\t\t// Send questions list to UI's\n\t\t//this.gameUI.sendQuestions(this.questions.all(), this.currentQuestionIndex)\n\t\t//this.masterUI.sendQuestions(this.questions.all(), this.currentQuestionIndex)\n\n\t\tlet start = { \n\t\t\tcurrentQuestionIndex: this.currentQuestionIndex,\n\t\t\tquestionsCount: this.questions.length()\n\t\t};\n\t\tconsole.log('######', start)\n\t\tthis.gameUI.send('start', start);\n\t\tthis.masterUI.send('start', start);\n\n\t\t// Light of all teams and theirs buzzers\n\t\tthis.teams.map((team, index) => {\n\t\t\tteam.lightOn = false\n\t\t\tthis.buzzer.lightOff(index)\n\t\t\tthis.gameUI.sendUpdateTeam(team)\n\t\t\tthis.masterUI.sendUpdateTeam(team)\n\t\t})\n\n\t\t//console.log('Server -- start questions')\n\t\tif (this.buzzOnPressUnregister) {\n\t\t\tthis.buzzOnPressUnregister();\n\t\t}\n\t\t\n\n\t\tthis.buzzOnPressUnregister = this.buzzer.onPress((controllerIndex, buttonIndex) => {\n\t\t\t// Buzz\n\t\t\tthis.buzzed(controllerIndex)\n\t\t})\n\n\t\tthis.save()\n\t}\n\n\tsendQuestion(index) {\n\t\tlet question = {\n\t\t\tquestion: this.questions.get(index),\n\t\t\tindex: index\n\t\t};\n\t\tthis.gameUI.send('question', question);\n\t\tthis.masterUI.send('question', question);\n\t}\n\n\tloadQuestions(mode) {\n\t\tvar ql = new QuestionLoader()\n\n\t\tthis.questions = null\n\t\tql.load(this.questionsDirectory, mode, (questions) => {\n\t\t\tthis.questions = questions;\n\t\t\tthis.questions.map((question) => {\n\t\t\t\tquestion.loadInformations(() => {});\n\t\t\t})\n\t\t})\n\t}\n\n\tbuzzed(controllerIndex) {\n\t\tconsole.log('Server -- Press on '+controllerIndex)\n\t\tconsole.log('Server -- currentQuestionIndex : ', this.currentQuestionIndex);\n\t\tconsole.log('Server -- answerWaitingForValidation : ', this.answerWaitingForValidation);\n\t\tif (this.currentQuestionIndex == -1 || this.answerWaitingForValidation != null) {\n\t\t\treturn\n\t\t}\n\n\t\tvar answer = this.answers[this.currentQuestionIndex]\n\t\tconsole.log('Server -- answer : ', answer)\n\t\tif (answer[controllerIndex] != -1) {\n\t\t\treturn\n\t\t}\n\n\t\t// Buzz accepted\n\t\tvar team = this.teams[controllerIndex]\n\t\tthis.buzzer.lightOn(controllerIndex)\n\t\tteam.lightOn = true\n\t\tteam.flash = true\n\t\tteam.answered = true;\n\t\tthis.sendTeam(team);\n\t\tthis.answerWaitingForValidation = controllerIndex\n\n\t\tthis.gameUI.sendAnswered(this.currentQuestionIndex, true, controllerIndex)\n\t\tthis.masterUI.sendAnswered(this.currentQuestionIndex, true, controllerIndex)\n\t}\n\n\tresetTeams() {\n\t\tthis.answers[this.currentQuestionIndex] = new Array(this.buzzer.controllersCount())\n\t\t\t.join()\n\t\t\t.split(',')\n\t\t\t.map(() => {\n\t\t\t\treturn -1;\n\t\t\t});\n\n\t\tthis.teams.map((team) => {\n\t\t\tif (team.lightOn || team.answered) {\n\t\t\t\tteam.lightOn = false\n\t\t\t\tteam.flash = false\n\t\t\t\tteam.answered = false;\n\t\t\t\tthis.sendTeam(team);\n\t\t\t}\t\n\t\t})\n\t}\n\n\tresetBuzzers() {\n\t\tthis.teams.map((team, index) => {\n\t\t\tthis.buzzer.lightOff(index)\n\t\t})\n\t} \n\n\tstartQuestion(data) {\n\t\tthis.answerWaitingForValidation = null;\n\t\tthis.currentQuestionIndex = data.index;\n\n\t\tif (this.currentQuestionIndex >= this.questions.length()) {\n\t\t\t// end of game, no more questions :(\n\t\t\tconsole.log('ici ???')\n\t\t\tthis.started = false;\n\t\t\tthis.removeSave();\n\t\t\tthis.gameUI.send('EOG', true);\n\t\t\tthis.masterUI.send('EOG', true);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.resetTeams()\n\t\tthis.resetBuzzers();\n\n\t\t// Set answers for the questions => [-1, -1, -1, -1]\n\t\t\n\n\t\tthis.gameUI.sendPlayQuestion(data.index, \"play\")\n\t\tthis.masterUI.sendPlayQuestion(data.index, \"play\")\n\n\t\tthis.save()\n\t}\n\n\tcontinueQuestion() {\n\t\tconsole.log('continue question....')\n\t\tthis.answerWaitingForValidation = null\n\t\t//this.resetTeams();\n\t\tthis.resetBuzzers();\n\t\tthis.gameUI.sendPlayQuestion(this.currentQuestionIndex, \"continue\")\n\t\tthis.masterUI.sendPlayQuestion(this.currentQuestionIndex, \"continue\")\n\n\t\tthis.save()\n\t}\n\n\tsetPoints(points) {\n\t\tif (this.answerWaitingForValidation == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar controllerIndex = this.answerWaitingForValidation;\n\t\tvar team = this.teams[controllerIndex]\n\n\t\tteam.points += points;\n\n\t\tthis.answers[this.currentQuestionIndex][controllerIndex] = 1;\n\n\t\tthis.buzzer.lightOff(controllerIndex)\n\t\tteam.lightOn = points > 0;\n\t\tteam.flash = true;\n\t\tthis.sendTeam(team);\n\n\t\tthis.save()\n\t}\n\n\t/********************************************\n\t * FINISH SCREEN\n\t ********************************************/\n\tfinishGame() {\n\t\t//this.setScreen('score')\n\n\t\tthis.save()\n\t}\n}"]}