{"version":3,"sources":["game.js"],"names":["jsonfile","path","Game","buzzer","gameUI","masterUI","questionsDirectory","startOrContinue","devices","game","master","started","screen","oldScreen","mode","teams","questions","currentQuestionIndex","answerWaitingForValidation","answers","recoverFromSave","addEventListener","console","log","max","controllersCount","i","lightOff","checkReady","setGame","leave","sendDevices","isStarted","start","continue","sendScreen","setScreen","setMode","sendTeams","startQuestions","file","join","data","all","promise","Promise","resolve","reject","writeFile","save","readFileSync","fromArray","setScreenMode","sendPlayMode","letters","split","Array","map","_","index","name","id","toLowerCase","lightOn","active","flash","points","teamIndex","newName","team","sendTeam","sendUpdateTeam","initTeams","loadQuestions","onPress","controllerIndex","buttonIndex","activateTeam","length","sendQuestions","buzzed","ql","load","question","loadInformations","answer","sendAnswered","resetTeams","resetBuzzers","sendPlayQuestion"],"mappings":"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","file":"game.js","sourcesContent":["\"use strict\";\n\nimport { Question, BlindQuestion, DeafQuestion } from './question'\nimport { QuestionLoader, QuestionList } from './question_loader'\nimport * as jsonfile from 'jsonfile'\nimport * as path from 'path'\n\n//type Screen = \"starting\" | \"devices\" | \"mode-select\" | \"team-activation\" | \"questions\" | \"score\"\n//type Devices = { buzzer: boolean, game: boolean, master: boolean }\n//type Mode = \"random\" | \"normal\"\n//type PlayState = \"play\" | \"continue\" | \"stop\" | \"pause\"\n\nexport class Game {\n\t// buzzer: Buzzer\n\t// gameUI: GameUI\n\t// masterUI: GameUI\n\t// devices: Devices\n\t// started: boolean\n\t// screen: Screen\n\t// oldScreen: Screen\n\t// mode: Mode\n\t// teams: Array<Team>\n\t// questions: QuestionList\n\t// answers: Array<Array<number>>\n\t// currentQuestionIndex: number\n\t// answerWaitingForValidation: number\n\t// questionsDirectory: string\n\t// startOrContinue: string\n\n\tconstructor(buzzer, gameUI, masterUI, questionsDirectory, startOrContinue) {\n\t\tthis.buzzer = buzzer\n\t\tthis.gameUI = gameUI\n\t\tthis.masterUI = masterUI\n\t\tthis.questionsDirectory = questionsDirectory;\n\t\tthis.devices = { buzzer: false, game: false, master: false }\n\t\tthis.started = false\n\t\tthis.screen = 'starting'\n\t\tthis.oldScreen = null\n\t\tthis.mode = null\n\t\tthis.teams = []\n\t\tthis.questions = null\n\t\tthis.currentQuestionIndex = -1\n\t\tthis.answerWaitingForValidation = null\n\t\tthis.answers = []\n\t\tthis.startOrContinue = startOrContinue;\n\n\t\tif (startOrContinue == 'continue') {\n\t\t\tthis.recoverFromSave();\n\t\t}\n\n\t\tthis.buzzer.addEventListener('ready', () => {\n\t\t\tconsole.log('ready ???')\n\t\t\tvar max = this.buzzer.controllersCount()\n\t\t\tfor(var i=0; i < max; i++) {\n\t\t\t\tthis.buzzer.lightOff(i)\n\t\t\t}\n\n\t\t\tthis.devices.buzzer = true\n\t\t\tthis.checkReady()\n\t\t})\n\n\t\tthis.gameUI.addEventListener('ready', () => {\n\t\t\tthis.devices.game = true\n\t\t\tthis.gameUI.setGame(this)\n\t\t\tthis.checkReady()\n\t\t})\n\n\t\tthis.masterUI.addEventListener('ready', () => {\n\t\t\tthis.devices.master = true\n\t\t\tthis.masterUI.setGame(this)\n\t\t\tthis.checkReady()\n\t\t})\n\n\t\tthis.buzzer.addEventListener('leave', () => {\n\t\t\tthis.devices.buzzer = false\n\t\t\tthis.leave()\n\t\t})\n\n\t\tthis.gameUI.addEventListener('leave', () => {\n\t\t\tthis.devices.game = false\n\t\t\tthis.leave()\n\t\t})\n\n\t\tthis.masterUI.addEventListener('leave', () => {\n\t\t\tthis.devices.master = false\n\t\t\tthis.leave()\n\t\t})\n\t}\n\n\tcheckReady() {\n\t\tif (this.devices.game) {\n\t\t\tthis.gameUI.sendDevices(this.devices)\n\t\t}\n\t\tif (this.devices.master) {\n\t\t\tthis.masterUI.sendDevices(this.devices);\n\t\t}\n\t\t\n\t\tif (!this.devices.buzzer || !this.devices.game || !this.devices.master) {\n\t\t\treturn\n\t\t}\n\n\t\tif (!this.isStarted()) {\n\t\t\tthis.start()\n\t\t\treturn\n\t\t}\n\n\t\t// Continue Game\n\t\tthis.continue()\n\t}\n\n\tleave() {\n\t\tthis.oldScreen = this.screen;\n\t\tthis.screen = 'devices'\n\n\t\tif (this.devices.game) {\n\t\t\tthis.gameUI.sendDevices(this.devices)\n\t\t\tthis.gameUI.sendScreen(this.screen)\n\t\t}\n\t\tif (this.devices.master) {\n\t\t\tthis.masterUI.sendDevices(this.devices)\n\t\t\tthis.masterUI.sendScreen(this.screen)\n\t\t}\n\t}\n\n\tisStarted() {\n\t\treturn this.started\n\t}\n\n\tstart() {\n\t\tthis.started = true\n\t\tthis.setScreen('mode-select')\n\t}\n\n\tcontinue() {\n\t\tthis.setScreen(this.oldScreen)\n\n\t\t// Send the mode if already one\n\t\tif (this.mode) {\n\t\t\tthis.setMode(this.mode, false)\n\t\t}\n\n\t\tif (this.teams) {\n\t\t\tthis.sendTeams(this.teams);\n\t\t}\n\n\t\tif (this.questions && this.screen != 'score') {\n\t\t\t//this.gameUI.sendQuestions(this.questions.all(), this.currentQuestionIndex)\n\t\t\t//this.masterUI.sendQuestions(this.questions.all(), this.currentQuestionIndex)\n\t\t\tthis.startQuestions()\n\t\t}\n\n\t\t/*if (this.currentQuestionIndex && this.screen != 'score') {\n\t\t\tconsole.log('currentQuestionIndex  : ', this.currentQuestionIndex)\n\t\t\tthis.startQuestion(this.currentQuestionIndex);\n\t\t}*/\n\t}\n\n\tsave() {\n\t\tvar file = path.join(this.questionsDirectory, 'game.json')\n\n\t\tvar data = {\n\t\t\tmode: this.mode,\n\t\t\tteams: this.teams,\n\t\t\tstarted: this.started,\n\t\t\tscreen: this.screen,\n\t\t\tcurrentQuestionIndex: this.currentQuestionIndex,\n\t\t\tanswerWaitingForValidation: this.answerWaitingForValidation,\n\t\t\tanswers: this.answers,\n\t\t\tquestions: this.questions && this.questions.all()\n\t\t};\n\n\t\tvar promise = new Promise((resolve, reject) => {\n\t\t\tjsonfile.writeFile(file, data, () => {\n\t\t\t\tresolve()\n\t\t\t})\n\t\t});\n\n\t\treturn promise\n\t}\n\n\trecoverFromSave() {\n\t\tvar file = path.join(this.questionsDirectory, 'game.json')\n\n\t\tvar save = jsonfile.readFileSync(file)\n\t\tconsole.log('save : ', save)\n\t\tthis.mode = save.mode\n\t\tthis.teams = save.teams\n\t\tthis.started = save.started\n\t\tthis.screen = save.screen\n\t\tthis.oldScreen = save.screen\n\t\tthis.currentQuestionIndex = save.currentQuestionIndex\n\t\tthis.answerWaitingForValidation = save.answerWaitingForValidation\n\t\tthis.answers = save.answers\n\t\tthis.questions = new QuestionList(this.mode)\n\t\tthis.questions.fromArray(save.questions)\n\t}\n\n\tsetScreen(screen) {\n\t\tthis.screen = screen\n\t\tthis.gameUI.sendScreen(this.screen)\n\t\tthis.masterUI.sendScreen(this.screen)\n\t}\n\n\t/********************************************\n\t * MODE SCREEN\n\t ********************************************/\n\tsetMode(mode, setScreenMode = true) {\n\t\tthis.mode = mode\n\t\tthis.save()\n\t\tif(setScreenMode) {\n\t\t\tthis.gameUI.sendPlayMode(mode)\n\t\t\tthis.masterUI.sendPlayMode(mode)\n\t\t}\n\t}\n\n\t/********************************************\n\t * TEAM ACTIVATION SCREEN\n\t ********************************************/\n\tinitTeams() {\n\t\tvar letters = 'ABCDEFGHIJKLMNOPQRST'.split('');\n\t\tthis.teams = new Array(this.buzzer.controllersCount())\n\t\t\t.join()\n\t\t\t.split(',')\n\t\t\t.map((_, index) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: letters[index],\n\t\t\t\t\tid: letters[index].toLowerCase(),\n\t\t\t\t\tlightOn: false,\n\t\t\t\t\tactive: false,\n\t\t\t\t\tflash: false,\n\t\t\t\t\tpoints: 0\n\t\t\t\t}\n\t\t\t})\n\t}\n\n\t/*cleanTeams() {\n\t\tthis.teams = this.teams.filter((team) => {\n\t\t\treturn this.\n\t\t})\n\t}*/\n\n\tsendTeams(teams) {\n\t\tthis.gameUI.sendTeams(teams)\n\t\tthis.masterUI.sendTeams(teams)\n\t}\n\n\tupdateTeamName(teamIndex, newName) {\n\t\tvar team = this.teams[teamIndex]\n\t\tteam.name = newName\n\t\tthis.sendTeam(team)\n\t}\n\n\tsendTeam(team, lightOn=true, flash=true) {\n\t\tteam.lightOn = lightOn\n\t\tteam.flash = flash\n\t\tthis.gameUI.sendUpdateTeam(team)\n\t\tthis.masterUI.sendUpdateTeam(team)\n\t\tteam.flash = false\n\t}\n\n\tsetTeamsActivation() {\n\t\t// Initialize the teams\n\t\tthis.initTeams();\n\t\tthis.sendTeams(this.teams)\n\n\t\tthis.loadQuestions(this.mode)\n\n\t\tthis.setScreen('team-activation')\n\t\tthis.buzzer.onPress((controllerIndex, buttonIndex) => {\n\t\t\tconsole.log('buzz : ', controllerIndex)\n\t\t\tthis.activateTeam(controllerIndex)\n\t\t})\n\n\t\tthis.save()\n\t}\n\n\tactivateTeam(controllerIndex) {\n\t\tconsole.log('activateTeam', controllerIndex, this.teams.length)\n\t\tvar team = this.teams[controllerIndex]\n\n\t\t// Make sure a team can only be activated once\n\t\tif (team.active) {\n\t\t\treturn\n\t\t}\n\n\t\t// Light on the new activated team\n\t\tthis.buzzer.lightOn(controllerIndex)\n\n\t\t// Update the team\n\t\tteam.active = true\n\t\tthis.sendTeam(team)\n\n\t\tthis.save()\n\t}\n\n\t/********************************************\n\t * QUESTIONS SCREEN\n\t ********************************************/\n\tstartQuestions() {\n\t\tthis.setScreen('questions')\n\n\t\t//this.cleanTeams(this.teams)\n\t\t//this.gameUI.sendTeams(this.teams)\n\t\t//this.masterUI.sendTeams(this.teams)\n\n\t\t// Send questions list to UI's\n\t\tthis.gameUI.sendQuestions(this.questions.all(), this.currentQuestionIndex)\n\t\tthis.masterUI.sendQuestions(this.questions.all(), this.currentQuestionIndex)\n\n\t\t// Light of all teams and theirs buzzers\n\t\tthis.teams.map((team, index) => {\n\t\t\tteam.lightOn = false\n\t\t\tthis.buzzer.lightOff(index)\n\t\t\tthis.gameUI.sendUpdateTeam(team)\n\t\t\tthis.masterUI.sendUpdateTeam(team)\n\t\t})\n\n\t\tthis.buzzer.onPress((controllerIndex, buttonIndex) => {\n\t\t\t// Buzz\n\t\t\tthis.buzzed(controllerIndex)\n\t\t})\n\n\t\tthis.save()\n\t}\n\n\tloadQuestions(mode) {\n\t\tvar ql = new QuestionLoader()\n\n\t\tthis.questions = null\n\t\tql.load(this.questionsDirectory, mode, (questions) => {\n\t\t\tthis.questions = questions;\n\t\t\tthis.questions.map((question) => {\n\t\t\t\tquestion.loadInformations(() => {});\n\t\t\t})\n\t\t})\n\t}\n\n\tbuzzed(controllerIndex) {\n\t\tconsole.log('Press on '+controllerIndex)\n\t\tif (this.currentQuestionIndex == -1 || this.answerWaitingForValidation != null) {\n\t\t\treturn\n\t\t}\n\n\t\tvar answer = this.answers[this.currentQuestionIndex]\n\t\tif (answer[controllerIndex] != -1) {\n\t\t\treturn\n\t\t}\n\n\t\t// Buzz accepted\n\t\tvar team = this.teams[controllerIndex]\n\t\tthis.buzzer.lightOn(controllerIndex)\n\t\tthis.sendTeam(team)\n\t\tthis.answerWaitingForValidation = controllerIndex\n\n\t\tthis.gameUI.sendAnswered(controllerIndex, true)\n\t\tthis.masterUI.sendAnswered(controllerIndex, true)\n\t}\n\n\tresetTeams() {\n\t\tthis.teams.map((team) => {\n\t\t\tthis.sendTeam(team, false, false);\n\t\t})\n\t}\n\n\tresetBuzzers() {\n\t\tthis.teams.map((team, index) => {\n\t\t\tthis.buzzer.lightOff(index)\n\t\t})\n\t} \n\n\tstartQuestion(index) {\n\t\tthis.answerWaitingForValidation = null;\n\t\tthis.currentQuestionIndex = index;\n\n\t\tthis.resetTeams()\n\t\tthis.resetBuzzers()\n\n\t\t// Set answers for the questions => [-1, -1, -1, -1]\n\t\tthis.answers[this.currentQuestionIndex] = new Array(this.buzzer.controllersCount())\n\t\t\t.join()\n\t\t\t.split(',')\n\t\t\t.map(() => {\n\t\t\t\treturn -1;\n\t\t\t});\n\n\t\tthis.gameUI.sendPlayQuestion(index, \"play\")\n\t\tthis.masterUI.sendPlayQuestion(index, \"play\")\n\n\t\tthis.save()\n\t}\n\n\tcontinueQuestion() {\n\t\tthis.answerWaitingForValidation = null\n\t\tthis.resetTeams();\n\t\tthis.resetBuzzers();\n\t\tthis.gameUI.sendPlayQuestion(this.currentQuestionIndex, \"continue\")\n\t\tthis.masterUI.sendPlayQuestion(this.currentQuestionIndex, \"continue\")\n\n\t\tthis.save()\n\t}\n\n\tsetPoints(points) {\n\t\tvar controllerIndex = this.answerWaitingForValidation;\n\t\tvar team = this.teams[controllerIndex]\n\n\t\tteam.points += points;\n\n\t\tthis.answers[this.currentQuestionIndex][controllerIndex] = 1;\n\n\t\tthis.buzzer.lightOff(controllerIndex)\n\t\tthis.sendTeam(team, false, false);\n\n\t\tthis.save()\n\t}\n\n\t/********************************************\n\t * FINISH SCREEN\n\t ********************************************/\n\tfinishGame() {\n\t\tthis.setScreen('score')\n\n\t\tthis.save()\n\t}\n}"]}